{"version":3,"sources":["shared/utils.ts","Calculator/Calculator.style.ts","assets/images/equal-experts.png","Calculator/Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operators","Wrapper","styled","div","Container","main","ControlGrid","Branding","img","Button","button","DisplayContainer","DisplayHistory","DisplayInput","parseEquation","sum","answer","divideIndex","indexOf","DIVIDE","multiplyIndex","MULTIPLY","addIndex","ADD","subtractionIndex","SUBTRACT","calculateSum","splice","length","Error","leftOperand","operator","rightOperand","add","subtract","multiply","divide","format","precision","Calculator","useState","calculationArr","setCalculationArr","isOperatorLastAction","setOperatorLastAction","currentValue","setCurrentValue","equationDisplay","setEquationDisplay","handleInput","event","value","currentTarget","toString","currentStringValue","Number","handleOperator","prevState","stateArray","push","join","src","Logo","alt","data-testid","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f52bbb4.chunk.js","sourcesContent":["import { add, subtract, multiply, divide, format } from 'mathjs';\n\nexport enum Operators {\n  ADD = '+',\n  SUBTRACT = '-',\n  DIVIDE = 'รท',\n  MULTIPLY = 'ร',\n}\n\n/**\n * Parses an equation that is in the form as an array e.g.\n * [100, Operators.ADD, 100, Operators.SUBTRACT, 50]\n * @param sum Returns a the final answer as a number\n */\nexport const parseEquation = (sum: (Operators | number)[]): number => {\n  let answer: number;\n\n  const divideIndex = sum.indexOf(Operators.DIVIDE);\n  const multiplyIndex = sum.indexOf(Operators.MULTIPLY);\n  const addIndex = sum.indexOf(Operators.ADD);\n  const subtractionIndex = sum.indexOf(Operators.SUBTRACT);\n\n  if (divideIndex !== -1) {\n    answer = calculateSum(\n      sum[divideIndex - 1] as number,\n      sum[divideIndex] as Operators,\n      sum[divideIndex + 1] as number,\n    );\n    sum[divideIndex - 1] = answer;\n    sum.splice(divideIndex, 2);\n    if (sum.length > 1) {\n      return parseEquation(sum);\n    }\n  } else if (multiplyIndex !== -1) {\n    answer = calculateSum(\n      sum[multiplyIndex - 1] as number,\n      sum[multiplyIndex] as Operators,\n      sum[multiplyIndex + 1] as number,\n    );\n    sum[multiplyIndex - 1] = answer;\n    sum.splice(multiplyIndex, 2);\n    if (sum.length > 1) {\n      return parseEquation(sum);\n    }\n  } else if (addIndex !== -1) {\n    answer = calculateSum(\n      sum[addIndex - 1] as number,\n      sum[addIndex] as Operators,\n      sum[addIndex + 1] as number,\n    );\n    sum[addIndex - 1] = answer;\n    sum.splice(addIndex, 2);\n    if (sum.length > 1) {\n      return parseEquation(sum);\n    }\n  } else if (subtractionIndex !== -1) {\n    answer = calculateSum(\n      sum[subtractionIndex - 1] as number,\n      sum[subtractionIndex] as Operators,\n      sum[subtractionIndex + 1] as number,\n    );\n    sum[subtractionIndex - 1] = answer;\n    sum.splice(subtractionIndex, 2);\n    if (sum.length > 1) {\n      return parseEquation(sum);\n    }\n  } else {\n    throw new Error('Unable to find matching operator');\n  }\n  return sum[0] as number;\n};\n\n/**\n * Solves the equation of a + b = x, where the operator is supplied\n *\n * @param leftOperand - The left operand of the sum, 'a'\n * @param operator - The operator, such as + - x รท\n * @param rightOperand - The right operand of the sum, 'b'\n * @return {number} - The answer of the equation\n *\n */\nexport const calculateSum = (\n  leftOperand: number,\n  operator: Operators,\n  rightOperand: number,\n): number => {\n  let answer;\n  switch (operator) {\n    case Operators.ADD:\n      answer = add(leftOperand, rightOperand);\n      break;\n    case Operators.SUBTRACT:\n      answer = subtract(leftOperand, rightOperand);\n      break;\n    case Operators.MULTIPLY:\n      answer = multiply(leftOperand, rightOperand);\n      break;\n    case Operators.DIVIDE:\n      answer = divide(leftOperand, rightOperand);\n      break;\n  }\n  answer = format(answer, { precision: 14 });\n  return +answer;\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n`;\n\nexport const Container = styled.main`\n  box-sizing: border-box;\n  width: 100%;\n  max-width: 500px;\n  margin: 3.125rem auto 0 auto;\n  padding: 1.25rem 1.25rem 1.25rem 1.25rem;\n  background-color: #44454c;\n  border-radius: 6px;\n  box-shadow: 0px -1px 31px -3px rgba(0, 0, 0, 0.69);\n`;\n\nexport const ControlGrid = styled.div`\n  display: grid;\n  grid-gap: 6px;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;\n`;\n\nexport const Branding = styled.img`\n  width: 150px;\n  margin-bottom: 1.25rem;\n`;\n\nexport const Button = styled.button`\n  padding: 1.25rem;\n  border-radius: 3px;\n  background-color: #aca6a3;\n  border: none;\n  font-weight: bold;\n  font-size: 1.5rem;\n  color: #121315;\n  background-color: #888;\n  background: linear-gradient(#888, #aca6a3);\n  border: 0 none;\n  box-shadow: 0 1px 0 #666, 0 5px 0 #444, 0 6px 6px rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  :hover {\n    background: linear-gradient(#a0a0a0, #dacfc9);\n  }\n  :focus,\n  :active {\n    background: linear-gradient(#f1e5e5, #eaded7);\n    outline: 1px solid #555;\n    outline-offset: 2px;\n  }\n  @media (max-width: 411px) {\n    font-size: 1.2rem;\n  }\n  @media (max-width: 330px) {\n    padding: 8px;\n  }\n`;\n\nexport const DisplayContainer = styled.div`\n  position: relative;\n  background: #fff;\n  padding: 1.25rem;\n  grid-column-start: 1;\n  grid-column-end: 5;\n  text-align: right;\n  margin-bottom: 0.625rem;\n`;\n\nexport const DisplayHistory = styled.div`\n  font-size: 0.8rem;\n  position: absolute;\n  top: 0.3125px;\n  right: 1.25rem;\n`;\nexport const DisplayInput = styled.div``;\n","export default __webpack_public_path__ + \"static/media/equal-experts.17ff2453.png\";","import React, { useState } from 'react';\nimport * as S from './Calculator.style';\nimport { parseEquation, Operators } from '../shared/utils';\nimport Logo from '../assets/images/equal-experts.png';\n\nconst INPUT_CHARACTER_LIMIT = 16;\n\nexport default function Calculator() {\n  /** Holds the equation where an operator is always surrounded by an operand */\n  const [calculationArr, setCalculationArr] = useState<(number | Operators)[]>(\n    [],\n  );\n\n  /** Flag to see if the last user action was an operator */\n  const [isOperatorLastAction, setOperatorLastAction] = useState(false);\n\n  /** The current input of the user, either an operand or operator */\n  const [currentValue, setCurrentValue] = useState<number | string | Operators>(\n    0,\n  );\n\n  const [equationDisplay, setEquationDisplay] = useState<string>('');\n\n  /**\n   * Parses numbers and a dot/decimal point inputs, given by the\n   * HTML button event.\n   * @param event\n   */\n  const handleInput = (event: React.MouseEvent<HTMLButtonElement>) => {\n    let value = event.currentTarget.value;\n\n    // Input no longer allowed after X number of characters\n    if (currentValue.toString().length >= INPUT_CHARACTER_LIMIT) {\n      return;\n    }\n\n    // Don't append to previous input if an operator was last used\n    let currentStringValue = '';\n    if (isOperatorLastAction) {\n      currentStringValue = value;\n      setOperatorLastAction(false);\n    } else {\n      currentStringValue = currentValue.toString() + value;\n    }\n\n    if (value === '.') {\n      // Appending only if there is no dot '.' in value\n      if (currentValue.toString().indexOf('.') === -1) {\n        setCurrentValue(currentStringValue);\n      }\n    } else {\n      setCurrentValue(Number(currentStringValue));\n    }\n  };\n\n  /**\n   * Parses math operators, given by the HTML button event.\n   * @param event\n   */\n  const handleOperator = (event: React.MouseEvent<HTMLButtonElement>) => {\n    let operator: Operators;\n\n    // Do not allow operators to be pressed again. This is not ideal\n    //    as a user cannot change their previous operator. It should\n    //    be changed to accommodate the changing of operators\n    if (isOperatorLastAction) {\n      return;\n    }\n\n    const textOperator = event.currentTarget.value;\n    switch (textOperator) {\n      case '+':\n        operator = Operators.ADD;\n        break;\n      case '-':\n        operator = Operators.SUBTRACT;\n        break;\n      case '*':\n        operator = Operators.MULTIPLY;\n        break;\n      case '/':\n        operator = Operators.DIVIDE;\n        break;\n      default:\n        throw new Error('Incorrect operator type supplied');\n    }\n    // Adds a format of [number, Operator] to the array\n    setCalculationArr((prevState) => {\n      const stateArray = [...prevState];\n      stateArray.push(Number(currentValue));\n      stateArray.push(operator);\n      return stateArray;\n    });\n    setOperatorLastAction(true);\n    setCurrentValue(operator);\n    setEquationDisplay(\n      `${calculationArr.join(' ')} ${currentValue} ${operator}`,\n    );\n  };\n\n  const handlePlusMinus = () => {\n    setCurrentValue((prevState) => {\n      let value = Number(prevState) * -1;\n      return value;\n    });\n  };\n\n  /**\n   * Clears the current values of the calculator\n   */\n  const handleClear = () => {\n    setCurrentValue(0);\n    setCalculationArr([]);\n    setEquationDisplay('');\n  };\n\n  /**\n   * Performs a final calculation on the user's previous\n   * inputs\n   */\n  const handleCalculate = () => {\n    // Array is cleared after each calculation so you cannot calculate\n    //    successively. This is currently to handle errors. The ability\n    //    to calculate and use prior inputs should be added\n    if (calculationArr.length > 1) {\n      const answer = parseEquation([...calculationArr, Number(currentValue)]);\n      setCurrentValue(answer);\n      setCalculationArr([]);\n      setEquationDisplay(\n        `${calculationArr.join(' ')} ${currentValue} = ${answer}`,\n      );\n    }\n  };\n\n  return (\n    <S.Wrapper>\n      <S.Container>\n        <S.Branding src={Logo} alt=\"EqualExperts Logo\" />\n        <S.ControlGrid>\n          <S.DisplayContainer>\n            <S.DisplayHistory data-testid=\"calculator-display-history\">\n              {equationDisplay}\n            </S.DisplayHistory>\n            <S.DisplayInput data-testid=\"calculator-display-input\">\n              {currentValue}\n            </S.DisplayInput>\n          </S.DisplayContainer>\n          <S.Button></S.Button>\n          <S.Button></S.Button>\n          <S.Button\n            onClick={handlePlusMinus}\n            value=\"plus-minus\"\n            data-testid=\"calculator-operator-plus-minus\"\n          >\n            ยฑ\n          </S.Button>\n          <S.Button onClick={handleClear} data-testid=\"calculator-key-clear\">\n            C\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"7\"\n            data-testid=\"calculator-key-7\"\n          >\n            7\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"8\"\n            data-testid=\"calculator-key-8\"\n          >\n            8\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"9\"\n            data-testid=\"calculator-key-9\"\n          >\n            9\n          </S.Button>\n          <S.Button\n            onClick={handleOperator}\n            value=\"/\"\n            data-testid=\"calculator-operator-divide\"\n          >\n            รท\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"4\"\n            data-testid=\"calculator-key-4\"\n          >\n            4\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"5\"\n            data-testid=\"calculator-key-5\"\n          >\n            5\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"6\"\n            data-testid=\"calculator-key-6\"\n          >\n            6\n          </S.Button>\n          <S.Button\n            onClick={handleOperator}\n            value=\"*\"\n            data-testid=\"calculator-operator-multiply\"\n          >\n            ร\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"1\"\n            data-testid=\"calculator-key-1\"\n          >\n            1\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"2\"\n            data-testid=\"calculator-key-2\"\n          >\n            2\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"3\"\n            data-testid=\"calculator-key-3\"\n          >\n            3\n          </S.Button>\n          <S.Button\n            onClick={handleOperator}\n            value=\"-\"\n            data-testid=\"calculator-operator-minus\"\n          >\n            -\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\"0\"\n            data-testid=\"calculator-key-0\"\n          >\n            0\n          </S.Button>\n          <S.Button\n            onClick={handleInput}\n            value=\".\"\n            data-testid=\"calculator-key-dot\"\n          >\n            .\n          </S.Button>\n          <S.Button\n            data-testid=\"calculator-key-equals\"\n            value=\"=\"\n            onClick={handleCalculate}\n          >\n            =\n          </S.Button>\n          <S.Button\n            onClick={handleOperator}\n            value=\"+\"\n            data-testid=\"calculator-operator-plus\"\n          >\n            +\n          </S.Button>\n        </S.ControlGrid>\n      </S.Container>\n    </S.Wrapper>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator/Calculator';\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}